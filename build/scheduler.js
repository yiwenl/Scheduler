let e=window.requestAnimationFrame,n=60,t=1,r=0,o=0,f=0;const i=new Map,u=[],a=[];let c=[],s=[],d=0;function l(t){n=t,e=t=>{requestAnimationFrame((r=>{const o=1e3/n,i=r-f;i>=o?t(r):setTimeout((()=>e(t)),o-i)}))}}r=performance.now(),function d(l){!function(){let e,o=0;for(let[e,n]of i)null!=n&&n.func(n.args);for(;c.length>0;)e=c.pop(),e.func(e.args);for(o=0;o<u.length;o++)e=u[o],r-e.time>e.delay/t&&(e.func(e.args),e.repeat?e.time=r:u.splice(o,1));let f=performance.now();for(;a.length>0;){if(e=a.shift(),!(performance.now()-f<1e3/n*t)){a.unshift(e);break}e.func(e.args)}}(),f=r,void 0===l?r+=1e3/n*t:r=l,o=r-f,c=c.concat(s),s=[],e(d)}(r);var p={addEF:function(e,n){if("function"!=typeof e)throw new Error("Invalid function provided for enterframe task.");const t=++d;return i.set(t,{func:e,args:n}),t},removeEF:function(e){return i.delete(e),-1},delay:function(e,n,t,o=!1){if("function"!=typeof e)throw new Error("Invalid function provided for delayed task.");u.push({func:e,args:t,delay:n,time:r,repeat:o})},next:function(e,n){if("function"!=typeof e)throw new Error("Invalid function provided for next frame task.");s.push({func:e,args:n})},defer:function(e,n){if("function"!=typeof e)throw new Error("Invalid function provided for deferred task.");a.push({func:e,args:n})},getTime:function(){return r},getDeltaTime:function(){return o},setFrameRate:l,setTimeScale:function(e){t=e,l(n*t)},getTimeScale:function(){return t},setEnterframeFunc:function(n){e=n}};export default p;
