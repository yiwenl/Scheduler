let e=window.requestAnimationFrame,n=60,t=1,r=0,o=0,i=0;const f=new Map,a=[];let u=[],c=[],l=0;function s(t){n=t,e=t=>{requestAnimationFrame((r=>{const o=1e3/n,f=r-i;f>=o?t(r):setTimeout((()=>e(t)),o-f)}))}}r=performance.now(),function l(s){!function(){let e,n=0;for(let[e,n]of f)null!=n&&n.func(n.args);for(;u.length>0;)e=u.pop(),e.func(e.args);for(n=0;n<a.length;n++)e=a[n],r-e.time>e.delay/t&&(e.func(e.args),e.repeat?e.time=r:a.splice(n,1))}(),i=r,void 0===s?r+=1e3/n*t:r=s,o=r-i,u=u.concat(c),c=[],e(l)}(r);var d={addEF:function(e,n){if("function"!=typeof e)throw new Error("Invalid function provided for enterframe task.");const t=++l;return f.set(t,{func:e,args:n}),t},removeEF:function(e){return f.delete(e),-1},delay:function(e,n,t,o=!1){if("function"!=typeof e)throw new Error("Invalid function provided for delayed task.");a.push({func:e,args:t,delay:n,time:r,repeat:o})},next:function(e,n){if("function"!=typeof e)throw new Error("Invalid function provided for next frame task.");c.push({func:e,args:n})},getTime:function(){return r},getDeltaTime:function(){return o},setFrameRate:s,setTimeScale:function(e){t=e,s(n*t)},getTimeScale:function(){return t}};export default d;
